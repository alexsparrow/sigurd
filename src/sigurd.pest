// Literals
// Boolean
_true  = { "true" }
_false = { "false" }
bool  = { _true | _false }

// Integers
digit = _{ '0'..'9' }
int   =  { digit ~ (digit | "_")* }

// Floating points
float = {
    int ~ "." ~ int? ~ exp? |
    int ~ exp
}

plus  = { "+" }
minus = { "-" }
exp   = { ^"e" ~ (plus | minus)? ~ int }

// Strings
string = { "\"" ~ (raw_string | escape)* ~ "\"" }
raw_string = { (!("\\" | "\"") ~ ANY)+ }
hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex = { hex{1, 6} }
predefined = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte       = { "x" ~ hex{2} }
unicode    = { "u" ~ "{" ~ unicode_hex ~ "}" }
escape     = { "\\" ~ (predefined | byte | unicode) }

literal = _{ bool | float | int | string }

// Identifiers
ident_char = _{ 'a'..'z' | 'A'..'Z' | '0'..'9' | "_" }
ident      =  @{
    ('a'..'z' | 'A'..'Z') ~ ident_char* |
    "_" ~ ident_char+
}

// Expressions
op_unary_minus =  { "-" }
op_unary_not   =  { "!" }
op_unary       = _{
    op_unary_minus |
    op_unary_not
}

op_plus          =  { "+" }
op_minus         =  { "-" }
op_times         =  { "*" }
op_divide        =  { "/" }
op_and           =  { "&&" }
op_or            =  { "||" }
op_greater       =  { ">" }
op_greater_equal =  { ">=" }
op_lower         =  { "<" }
op_lower_equal   =  { "<=" }
op_equal         =  { "==" }
op_not_equal     =  { "!=" }
op_power         =  { "^" }
op_infix         = _{
    op_plus |
    op_minus |
    op_times |
    op_divide |
    op_and |
    op_or |
    op_greater |
    op_greater_equal |
    op_lower |
    op_lower_equal |
    op_equal |
    op_not_equal
}

paren_open  = { "(" }
paren_close = { ")" }

value = {
    float | // float comes before int since they overlap
    int |
    bool |
    //chr |
    string |
    call |
    ident |
    paren_open ~ expr ~ paren_close
}

dot   =  { "." }
comma =  _{ "," }
args  = { expr ~ (comma ~ expr)* }
call  =  { ident ~ paren_open ~ args? ~ paren_close }

term = { op_unary* ~ value ~ (dot ~ call)* }
expr = { term ~ (op_infix ~ term)* }


type_def = { ident ~ ":" ~ ident }
return_type = { "->" ~ ident }

arg_list = { type_def ~ (comma ~  type_def)* }
fn_def = { "fn" ~ ident ~ paren_open ~ arg_list? ~ paren_close ~ return_type? }

let_binding = { "let" ~ ident ~ "=" ~ expr}
if_statement = { "if" ~ expr ~ "{" ~ fn_body ~ "}"}
while_statement = { "while" ~ expr ~ "{" ~ fn_body ~ "}"}

statement = _{ let_binding | if_statement | while_statement | expr }
fn_body = { (statement ~ ";"?)* }

function = { fn_def ~ "{" ~ fn_body ~ "}"}

top_level_statement = _{ function }

// See https://github.com/pest-parser/pest/issues/304
eoi = _{ !ANY }
program = _{ SOI ~ top_level_statement* ~ eoi }

WHITESPACE = _{ " " | "\t" | "\n" }
